@page "/admin/products"
@page "/admin"
@inherits OwningComponentBase<IProductRepository>

<table class="table table-sm table-striped table-bordered">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Category</th>
            <th>Price</th>
        </tr>
    </thead>
    <tbody>
        @if (ProductData.Any())
        {
            @foreach(var p in ProductData)
            {
                <tr>
                    <td>@p.ProductId</td>
                    <td>@p.Name</td>
                    <td>@p.Category</td>
                    <td>@p.Price.ToString("c")</td>
                    <td>
                        <NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(p.ProductId)">Details</NavLink>
                        <NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(p.ProductId)">Edit</NavLink>
                        <button class="btn btn-danger btn-sm" @onclick="@(e => DeleteProduct(p.ProductId))">Delete</button>
                    </td>
                </tr>
            }
        } 
        else
        {
            <tr>
                <td colspan="5" class="text-center">No Products</td>
            </tr>    
        }
    </tbody>
</table>
<NavLink class="btn btn-primary" href="/admin/products/create">Create</NavLink>


@code {
    public IProductRepository ProductRepo => Service;

    public List<ProductViewModel> ProductData { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        var productEntities = await ProductRepo.GetAllProductsAsync();

        ProductData = productEntities.Select(p => new ProductViewModel
            {
                ProductId = p.Id,
                Name = p.Name,
                Description = p.Description,
                Price = p.Price,
                Category = p.Category
            }).ToList();
    }

    public async Task DeleteProduct(int productId)
    {
        var product = ProductRepo.GetProductById(productId);
        await ProductRepo.DeleteProductAsync(product);
        await UpdateData();
    }

    public string GetDetailsUrl(int id) => $"/admin/products/details/{id}";

    public string GetEditUrl(int id) => $"/admin/products/edit/{id}";

}