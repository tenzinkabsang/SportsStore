@page "/admin/orders"

@inherits OwningComponentBase<IOrderRepository>

<OrderTable TableTitle="Unshipped Orders" Orders="UnshippedOrders" ButtonLabel="Ship" OrderSelected="ShipOrder" />

<OrderTable TableTitle="Shipped Orders" Orders="ShippedOrders" ButtonLabel="ResetOrder" OrderSelected="ResetOrder" />

<button class="btn btn-info" @onclick="@(e => UpdateData())">Refresh Data</button>



@code {
    public IOrderRepository Repository => Service;

    public List<OrderViewModel> AllOrders { get; set; } = new();
    public List<OrderViewModel> UnshippedOrders { get; set; } = new();
    public List<OrderViewModel> ShippedOrders { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        var orderEntities = await Repository.GetOrdersAsync();

        // Abstract this away for real projects :)
        AllOrders = orderEntities.Select(e => new OrderViewModel
            {
                OrderId = e.Id,
                FirstName = e.Name.FirstName(),
                LastName = e.Name.LastName(),
                Line1 = e.Address.Line1,
                City = e.Address.City,
                State = e.Address.State,
                Zip = e.Address.Zip,
                GiftWrap = e.GiftWrap,
                IsShipped = e.IsShipped,
                Items = e.OrderItems.Select(x => new LineItem
                {
                    CartLineId = x.Id,
                    Quantity = x.Quantity,
                    Product = x.Product
                }).ToList()

            }).ToList();

        UnshippedOrders = AllOrders.Where(o => !o.IsShipped).ToList();
        ShippedOrders = AllOrders.Where(o => o.IsShipped).ToList();

    }

    public async Task ShipOrder(int id) => await UpdateOrder(id, true);
    public async Task ResetOrder(int id) => await UpdateOrder(id, false);


    private async Task UpdateOrder(int id, bool shipValue)
    {
        Order order = await Repository.GetByIdAsync(id).ConfigureAwait(false);
        order.IsShipped = shipValue;
        await Repository.SaveOrderAsync(order);
        await UpdateData();
    }


}